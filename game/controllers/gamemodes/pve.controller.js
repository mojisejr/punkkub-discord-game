require("dotenv").config({
  path: "../../config.env",
});
const { updateFightingMessage } = require("../message.controller");
const {
  getRandomPunkFromWallet,
  getRandomStatusFromAttribute,
} = require("../smartcontracts/punkkub.controller");
const {
  getRandomNFTFromWallet,
  getRandomStatusApeAttribute,
} = require("../smartcontracts/apekub.controller");
const { dungeon, apekub, marketplce } = require("../../constants/contract");
const { maxHp, attributesOffset } = require("../../constants/gamesetting");
const {
  renderFightingImage,
  renderWinnerImage,
  renderFightingImage1,
} = require("../../renderer/renderer");

//common figting
const { updateFighting1, canFight } = require("./../fighting.conntroller");
//common calculate
const { calculateEXP } = require("./../level.controller");
//common item usage
const {
  itemUseTrigger,
  randomItemFromWallet,
  randomResource,
  randomAmounts,
} = require("./../item.controller");
//item table
const items = require("../../constants/item.table");
//discord Exp update
const { updateExpDiscord } = require("../../services/userInfo.service");
//discord level update
const { levelUpDiscord } = require("../../constants/exp.table");
//disocord win lost update
const {
  updateWinCount,
  updateLoseCount,
  updatePveCount,
  checkDailyPveLimit,
} = require("../../services/fighting.service");

const { logFighting } = require("../../../database/log.service");
const { updateState } = require("../../../database/sqlite/sqlite.service");

const resources = require("../../constants/drop.table");
//sleep timer
const { sleep } = require("../../utils/sleep");
const { saveItemToInventory } = require("../../services/inventory.service");
const { updateQuestProgress } = require("../../services/quest.service");
const { updateGlobalExp } = require("../../services/global.service");
const { COMMANDS } = require("../../constants/commands");

async function autoPve1(punkkub) {
  //1 Set Up the Message Line for replying

  let headerMsg;
  let imageMsg;
  let gameMsg;
  let fighting = true;
  let counter = 0;
  let playerUsedItems = [];
  let enemyUsedItems = [];

  //2 get discordId from punkkub holder
  const { discordId, wallet } = punkkub;

  //check if canplay or reached to the daily limit
  const notLimited = await checkDailyPveLimit(discordId);
  if (!notLimited) {
    await updateState(discordId, false);
    headerMsg = await updateFightingMessage(
      null,
      `<@${discordId}> | ‚öîÔ∏è ‡∏•‡∏∏‡∏¢ Mode PVE ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß, ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ reset 7:00am ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏à‡∏Å‡∏≤‡∏ô ‚ù§Ô∏è‚Äçüî•`,
      COMMANDS.PVE
    );
    return;
  }

  //3 start header msg
  headerMsg = await updateFightingMessage(
    null,
    `<@${discordId}> | ‚öîÔ∏è ‡∏•‡∏∏‡∏¢ Mode PVE !! ‚öî`,
    COMMANDS.PVE
  );

  //4 get punk from wallet and dungeon
  let enemy = await getRandomNFTFromWallet(marketplce, maxHp, "apekub");
  // let enemy = await getRandomPunkFromWallet(dungeon, maxHp, "apekub");
  let player = await getRandomPunkFromWallet(wallet, maxHp, discordId);

  //5 check if any undefined
  enemy = enemy.result === true ? enemy.data : null;
  player = player.result === true ? player.data : null;

  const fightable = canFight(player, enemy);
  if (!fightable) {
    await updateFightingMessage(
      headerMsg,
      "üôÑ ‡πÉ‡∏Ñ‡∏£‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ..., ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ ! üôÉ"
    );
    await updateState(player.discordId, false);
    return;
  }

  if (enemy.result && player.result) {
    await updateState(player.discordId, false);
    await updateFightingMessage(
      headerMsg,
      `üß® Error: Cannot play game please tell <@${process.env.devId}>`
    );
    return;
  }

  const image = await renderFightingImage(player, enemy);
  imageMsg = await updateFightingMessage(
    null,
    {
      files: [{ attachment: image, name: "punkImageSystem.png" }],
    },
    COMMANDS.PVE
  );
  await updateFightingMessage(
    headerMsg,
    `‚öî ***${player.tokenId} ‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö ${enemy.tokenId}*** ‚öî`,
    COMMANDS.PVE
  );
  gameMsg = await updateFightingMessage(
    null,
    `üí™‚öîÔ∏èüß®ü§ñ‚ù§Ô∏è‚Äçüî•üî´üî™ü™ìüõ°üí£`,
    COMMANDS.PVE
  );

  while (fighting) {
    counter++;
    //1 select random attribute for fight
    // let { selectedAttr1, selectedAttr2 } = getRandomStatusFromAttribute(
    //   attributesOffset,
    //   player,
    //   enemy
    // );
    let { selectedAttr1, selectedAttr2 } = getRandomStatusApeAttribute(
      player,
      enemy
    );

    //2 random if item used
    let playerItemFlag = itemUseTrigger();
    let enemyItemFlag = itemUseTrigger();
    let playerItem;
    let enemyItem;

    if (playerItemFlag) {
      playerItem = randomItemFromWallet(items);
      playerUsedItems.push(playerItem);
    }
    if (enemyItemFlag) {
      enemyItem = randomItemFromWallet(items);
      enemyUsedItems.push(enemyItem);
    }

    //3 update atk status
    [_, _, hittedToken, atk] = updateFighting1(
      player,
      enemy,
      selectedAttr1,
      selectedAttr2,
      playerItem,
      enemyItem
    );

    //if item used get item image
    let item1Image = playerItem === undefined ? null : playerItem.itemImage;
    let item2Image = enemyItem === undefined ? null : enemyItem.itemImage;
    //create update object
    const gameImage = await renderFightingImage1(
      player,
      enemy,
      hittedToken,
      playerItem,
      enemyItem,
      item1Image,
      item2Image,
      selectedAttr1,
      selectedAttr2,
      counter,
      atk
    );

    await updateFightingMessage(
      imageMsg,
      {
        files: [{ attachment: gameImage, name: "fighting.png" }],
      },
      COMMANDS.PVE
    );

    // await updateFightingMessage(
    //   gameMsg,
    //   `
    //   ${"```"}
    //   *** ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${counter} *** \n
    // üìç ‡∏™‡∏π‡πâ‡∏î‡πâ‡∏ß‡∏¢ ***${selectedAttr1.trait_type}*** : [***${
    //     selectedAttr1.value
    //   }***] ‚öîÔ∏è [***${selectedAttr2.value}***] \n
    // ${
    //   hittedToken != null
    //     ? `‚öîÔ∏è ${
    //         hittedToken == 0 ? player.tokenId : enemy.tokenId
    //       } ‡πÇ‡∏î‡∏ô‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏•‡∏±‡∏á ***${atk}*** ‚öîÔ∏è`
    //     : ""
    // } \n
    // ${
    //   playerItem
    //     ? `üí• ‡πÄ‡∏à‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ! ${player.tokenId} ‡πÉ‡∏ä‡πâ *** ${playerItem.itemName} !`
    //     : ""
    // }\n
    // ${
    //   enemyItem
    //     ? `üí• ‡πÄ‡∏à‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ! ${enemy.tokenId} ‡πÉ‡∏ä‡πâ *** ${enemyItem.itemName} !`
    //     : ""
    // }\n${"```"}
    // üëâ ${player.tokenId} ‚ù§Ô∏è hp-[***${player.hp}/${maxHp}***]
    // üëâ ${enemy.tokenId} ‚ù§Ô∏è hp-[***${enemy.hp}/${maxHp}***]`
    // );

    if (player.hp <= 0 || enemy.hp <= 0) {
      if (player.hp <= 0) {
        const winImage = await renderWinnerImage(player, enemy, 1);
        await updateLoseCount(player.discordId);
        await updatePveCount(player.discordId);
        const quest = await updateQuestProgress(player.discordId, 1);
        await updateFightingMessage(
          headerMsg,
          `üí™*** ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏à‡πâ‡∏≤‡∏≤‡∏≤‡∏≤ ! ${enemy.tokenId}***üí™Ô∏è`,
          COMMANDS.PVE
        );
        await updateFightingMessage(
          imageMsg,
          {
            files: [{ attachment: winImage, name: "punkImageSystem.png" }],
          },
          COMMANDS.PVE
        );
        await updateFightingMessage(
          gameMsg,
          `***${enemy.tokenId} ‡∏ä‡∏ô‡∏∞ !! ü§ñ beeep beep ..~***
          ${quest.msg}
          `,
          COMMANDS.PVE
        );
      } else {
        const exp = calculateEXP(counter);
        const winImage = await renderWinnerImage(player, enemy, 0);
        const resource = randomResource(resources);
        const amounts = randomAmounts(counter);
        await updateExpDiscord(player.discordId, exp);
        await levelUpDiscord(player.discordId);
        await updateWinCount(player.discordId);
        await updatePveCount(player.discordId);
        await saveItemToInventory(player.discordId, resource.itemId, amounts);
        const quest = await updateQuestProgress(player.discordId, 1);
        const gExp = await updateGlobalExp(exp, player.discordId);
        await updateFightingMessage(
          headerMsg,
          `üí™*** ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏à‡πâ‡∏≤‡∏≤‡∏≤‡∏≤ ! ${player.tokenId}***üí™`,
          COMMANDS.PVE
        );
        await updateFightingMessage(
          imageMsg,
          {
            files: [{ attachment: winImage, name: "punkImageSystem.png" }],
          },
          COMMANDS.PVE
        );
        await updateFightingMessage(
          gameMsg,
          `***${player.tokenId} ‡∏ä‡∏ô‡∏∞ !! <@${player.discordId}> ..~ ***
            üçÜ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå [EXP] : [${exp}]
            ‚öôÔ∏è ‡∏Ñ‡∏≠‡∏°‡∏°‡∏π‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏ì‡πå [GEXP] : [${
              gExp <= 0 ? "‡∏ï‡πâ‡∏≠‡∏á level 5 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ" : gExp
            }]
            ${resource.itemEmoji} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${resource.itemName} x [${amounts}]
            ${quest.msg}`,
          COMMANDS.PVE
        );
      }

      fighting = false;
      const winId = player.hp <= 0 ? enemy.discordId : player.discordId;
      const lostId = player.hp <= 0 ? player.discordId : enemy.discordId;
      const timestamp = new Date().getTime();
      await logFighting(winId, lostId, counter, timestamp, "pve");
      await updateState(player.discordId, false);
    }
    await sleep(700);
  }
}

module.exports = {
  autoPve1,
};
